// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AutoClaimed extends ethereum.Event {
  get params(): AutoClaimed__Params {
    return new AutoClaimed__Params(this);
  }
}

export class AutoClaimed__Params {
  _event: AutoClaimed;

  constructor(event: AutoClaimed) {
    this._event = event;
  }

  get reqId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reqData(): string {
    return this._event.parameters[1].value.toString();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class MessageProcessedTo extends ethereum.Event {
  get params(): MessageProcessedTo__Params {
    return new MessageProcessedTo__Params(this);
  }
}

export class MessageProcessedTo__Params {
  _event: MessageProcessedTo;

  constructor(event: MessageProcessedTo) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MessageQueued extends ethereum.Event {
  get params(): MessageQueued__Params {
    return new MessageQueued__Params(this);
  }
}

export class MessageQueued__Params {
  _event: MessageQueued;

  constructor(event: MessageQueued) {
    this._event = event;
  }

  get idx(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class MetaTxDecoded extends ethereum.Event {
  get params(): MetaTxDecoded__Params {
    return new MetaTxDecoded__Params(this);
  }
}

export class MetaTxDecoded__Params {
  _event: MetaTxDecoded;

  constructor(event: MetaTxDecoded) {
    this._event = event;
  }
}

export class NewRegister extends ethereum.Event {
  get params(): NewRegister__Params {
    return new NewRegister__Params(this);
  }
}

export class NewRegister__Params {
  _event: NewRegister;

  constructor(event: NewRegister) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timepoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NotReady extends ethereum.Event {
  get params(): NotReady__Params {
    return new NotReady__Params(this);
  }
}

export class NotReady__Params {
  _event: NotReady;

  constructor(event: NotReady) {
    this._event = event;
  }

  get reqId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AutoClaim__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class AutoClaim__metaTxPrepareResultValue0Struct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class AutoClaim__metaTxPrepareResult {
  value0: AutoClaim__metaTxPrepareResultValue0Struct;
  value1: Bytes;

  constructor(
    value0: AutoClaim__metaTxPrepareResultValue0Struct,
    value1: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    return map;
  }

  getValue0(): AutoClaim__metaTxPrepareResultValue0Struct {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class AutoClaim__metaTxPrepareWithNonceResultValue0Struct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class AutoClaim__metaTxPrepareWithNonceResult {
  value0: AutoClaim__metaTxPrepareWithNonceResultValue0Struct;
  value1: Bytes;

  constructor(
    value0: AutoClaim__metaTxPrepareWithNonceResultValue0Struct,
    value1: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    return map;
  }

  getValue0(): AutoClaim__metaTxPrepareWithNonceResultValue0Struct {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class AutoClaim__metaTxRollupU256CondEqInputReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class AutoClaim__metaTxVerifyInputReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class AutoClaim extends ethereum.SmartContract {
  static bind(address: Address): AutoClaim {
    return new AutoClaim("AutoClaim", address);
  }

  ATTESTOR_ROLE(): Bytes {
    let result = super.call("ATTESTOR_ROLE", "ATTESTOR_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ATTESTOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ATTESTOR_ROLE",
      "ATTESTOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  eip712Domain(): AutoClaim__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );

    return new AutoClaim__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray()
    );
  }

  try_eip712Domain(): ethereum.CallResult<AutoClaim__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AutoClaim__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray()
      )
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getStorage(key: Bytes): Bytes {
    let result = super.call("getStorage", "getStorage(bytes):(bytes)", [
      ethereum.Value.fromBytes(key)
    ]);

    return result[0].toBytes();
  }

  try_getStorage(key: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getStorage", "getStorage(bytes):(bytes)", [
      ethereum.Value.fromBytes(key)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  metaTxGetNonce(from: Address): BigInt {
    let result = super.call(
      "metaTxGetNonce",
      "metaTxGetNonce(address):(uint256)",
      [ethereum.Value.fromAddress(from)]
    );

    return result[0].toBigInt();
  }

  try_metaTxGetNonce(from: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "metaTxGetNonce",
      "metaTxGetNonce(address):(uint256)",
      [ethereum.Value.fromAddress(from)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  metaTxPrepare(from: Address, data: Bytes): AutoClaim__metaTxPrepareResult {
    let result = super.call(
      "metaTxPrepare",
      "metaTxPrepare(address,bytes):((address,uint256,bytes),bytes32)",
      [ethereum.Value.fromAddress(from), ethereum.Value.fromBytes(data)]
    );

    return changetype<AutoClaim__metaTxPrepareResult>(
      new AutoClaim__metaTxPrepareResult(
        changetype<AutoClaim__metaTxPrepareResultValue0Struct>(
          result[0].toTuple()
        ),
        result[1].toBytes()
      )
    );
  }

  try_metaTxPrepare(
    from: Address,
    data: Bytes
  ): ethereum.CallResult<AutoClaim__metaTxPrepareResult> {
    let result = super.tryCall(
      "metaTxPrepare",
      "metaTxPrepare(address,bytes):((address,uint256,bytes),bytes32)",
      [ethereum.Value.fromAddress(from), ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AutoClaim__metaTxPrepareResult>(
        new AutoClaim__metaTxPrepareResult(
          changetype<AutoClaim__metaTxPrepareResultValue0Struct>(
            value[0].toTuple()
          ),
          value[1].toBytes()
        )
      )
    );
  }

  metaTxPrepareWithNonce(
    from: Address,
    data: Bytes,
    nonce: BigInt
  ): AutoClaim__metaTxPrepareWithNonceResult {
    let result = super.call(
      "metaTxPrepareWithNonce",
      "metaTxPrepareWithNonce(address,bytes,uint256):((address,uint256,bytes),bytes32)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );

    return changetype<AutoClaim__metaTxPrepareWithNonceResult>(
      new AutoClaim__metaTxPrepareWithNonceResult(
        changetype<AutoClaim__metaTxPrepareWithNonceResultValue0Struct>(
          result[0].toTuple()
        ),
        result[1].toBytes()
      )
    );
  }

  try_metaTxPrepareWithNonce(
    from: Address,
    data: Bytes,
    nonce: BigInt
  ): ethereum.CallResult<AutoClaim__metaTxPrepareWithNonceResult> {
    let result = super.tryCall(
      "metaTxPrepareWithNonce",
      "metaTxPrepareWithNonce(address,bytes,uint256):((address,uint256,bytes),bytes32)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AutoClaim__metaTxPrepareWithNonceResult>(
        new AutoClaim__metaTxPrepareWithNonceResult(
          changetype<AutoClaim__metaTxPrepareWithNonceResultValue0Struct>(
            value[0].toTuple()
          ),
          value[1].toBytes()
        )
      )
    );
  }

  metaTxRollupU256CondEq(
    req: AutoClaim__metaTxRollupU256CondEqInputReqStruct,
    signature: Bytes
  ): boolean {
    let result = super.call(
      "metaTxRollupU256CondEq",
      "metaTxRollupU256CondEq((address,uint256,bytes),bytes):(bool)",
      [ethereum.Value.fromTuple(req), ethereum.Value.fromBytes(signature)]
    );

    return result[0].toBoolean();
  }

  try_metaTxRollupU256CondEq(
    req: AutoClaim__metaTxRollupU256CondEqInputReqStruct,
    signature: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "metaTxRollupU256CondEq",
      "metaTxRollupU256CondEq((address,uint256,bytes),bytes):(bool)",
      [ethereum.Value.fromTuple(req), ethereum.Value.fromBytes(signature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  metaTxVerify(
    req: AutoClaim__metaTxVerifyInputReqStruct,
    signature: Bytes
  ): boolean {
    let result = super.call(
      "metaTxVerify",
      "metaTxVerify((address,uint256,bytes),bytes):(bool)",
      [ethereum.Value.fromTuple(req), ethereum.Value.fromBytes(signature)]
    );

    return result[0].toBoolean();
  }

  try_metaTxVerify(
    req: AutoClaim__metaTxVerifyInputReqStruct,
    signature: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "metaTxVerify",
      "metaTxVerify((address,uint256,bytes),bytes):(bool)",
      [ethereum.Value.fromTuple(req), ethereum.Value.fromBytes(signature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  polygonZkEVMBridge(): Address {
    let result = super.call(
      "polygonZkEVMBridge",
      "polygonZkEVMBridge():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_polygonZkEVMBridge(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "polygonZkEVMBridge",
      "polygonZkEVMBridge():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  queueGetBytes(key: Bytes): Bytes {
    let result = super.call("queueGetBytes", "queueGetBytes(bytes):(bytes)", [
      ethereum.Value.fromBytes(key)
    ]);

    return result[0].toBytes();
  }

  try_queueGetBytes(key: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "queueGetBytes",
      "queueGetBytes(bytes):(bytes)",
      [ethereum.Value.fromBytes(key)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  queueGetPrefix(): Bytes {
    let result = super.call("queueGetPrefix", "queueGetPrefix():(bytes)", []);

    return result[0].toBytes();
  }

  try_queueGetPrefix(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "queueGetPrefix",
      "queueGetPrefix():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  queueGetUint(key: Bytes): BigInt {
    let result = super.call("queueGetUint", "queueGetUint(bytes):(uint32)", [
      ethereum.Value.fromBytes(key)
    ]);

    return result[0].toBigInt();
  }

  try_queueGetUint(key: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("queueGetUint", "queueGetUint(bytes):(uint32)", [
      ethereum.Value.fromBytes(key)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rollupU256CondEq(
    condKeys: Array<Bytes>,
    condValues: Array<Bytes>,
    updateKeys: Array<Bytes>,
    updateValues: Array<Bytes>,
    actions: Array<Bytes>
  ): boolean {
    let result = super.call(
      "rollupU256CondEq",
      "rollupU256CondEq(bytes[],bytes[],bytes[],bytes[],bytes[]):(bool)",
      [
        ethereum.Value.fromBytesArray(condKeys),
        ethereum.Value.fromBytesArray(condValues),
        ethereum.Value.fromBytesArray(updateKeys),
        ethereum.Value.fromBytesArray(updateValues),
        ethereum.Value.fromBytesArray(actions)
      ]
    );

    return result[0].toBoolean();
  }

  try_rollupU256CondEq(
    condKeys: Array<Bytes>,
    condValues: Array<Bytes>,
    updateKeys: Array<Bytes>,
    updateValues: Array<Bytes>,
    actions: Array<Bytes>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rollupU256CondEq",
      "rollupU256CondEq(bytes[],bytes[],bytes[],bytes[],bytes[]):(bool)",
      [
        ethereum.Value.fromBytesArray(condKeys),
        ethereum.Value.fromBytesArray(condValues),
        ethereum.Value.fromBytesArray(updateKeys),
        ethereum.Value.fromBytesArray(updateValues),
        ethereum.Value.fromBytesArray(actions)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  toUint32Strict(_bytes: Bytes): BigInt {
    let result = super.call(
      "toUint32Strict",
      "toUint32Strict(bytes):(uint32)",
      [ethereum.Value.fromBytes(_bytes)]
    );

    return result[0].toBigInt();
  }

  try_toUint32Strict(_bytes: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toUint32Strict",
      "toUint32Strict(bytes):(uint32)",
      [ethereum.Value.fromBytes(_bytes)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get phatAttestor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _polygonZkEVMBridge(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class MetaTxRollupU256CondEqCall extends ethereum.Call {
  get inputs(): MetaTxRollupU256CondEqCall__Inputs {
    return new MetaTxRollupU256CondEqCall__Inputs(this);
  }

  get outputs(): MetaTxRollupU256CondEqCall__Outputs {
    return new MetaTxRollupU256CondEqCall__Outputs(this);
  }
}

export class MetaTxRollupU256CondEqCall__Inputs {
  _call: MetaTxRollupU256CondEqCall;

  constructor(call: MetaTxRollupU256CondEqCall) {
    this._call = call;
  }

  get req(): MetaTxRollupU256CondEqCallReqStruct {
    return changetype<MetaTxRollupU256CondEqCallReqStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class MetaTxRollupU256CondEqCall__Outputs {
  _call: MetaTxRollupU256CondEqCall;

  constructor(call: MetaTxRollupU256CondEqCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MetaTxRollupU256CondEqCallReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class RegisterClaimerCall extends ethereum.Call {
  get inputs(): RegisterClaimerCall__Inputs {
    return new RegisterClaimerCall__Inputs(this);
  }

  get outputs(): RegisterClaimerCall__Outputs {
    return new RegisterClaimerCall__Outputs(this);
  }
}

export class RegisterClaimerCall__Inputs {
  _call: RegisterClaimerCall;

  constructor(call: RegisterClaimerCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterClaimerCall__Outputs {
  _call: RegisterClaimerCall;

  constructor(call: RegisterClaimerCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RequestCall extends ethereum.Call {
  get inputs(): RequestCall__Inputs {
    return new RequestCall__Inputs(this);
  }

  get outputs(): RequestCall__Outputs {
    return new RequestCall__Outputs(this);
  }
}

export class RequestCall__Inputs {
  _call: RequestCall;

  constructor(call: RequestCall) {
    this._call = call;
  }
}

export class RequestCall__Outputs {
  _call: RequestCall;

  constructor(call: RequestCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class RollupU256CondEqCall extends ethereum.Call {
  get inputs(): RollupU256CondEqCall__Inputs {
    return new RollupU256CondEqCall__Inputs(this);
  }

  get outputs(): RollupU256CondEqCall__Outputs {
    return new RollupU256CondEqCall__Outputs(this);
  }
}

export class RollupU256CondEqCall__Inputs {
  _call: RollupU256CondEqCall;

  constructor(call: RollupU256CondEqCall) {
    this._call = call;
  }

  get condKeys(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get condValues(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get updateKeys(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get updateValues(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get actions(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }
}

export class RollupU256CondEqCall__Outputs {
  _call: RollupU256CondEqCall;

  constructor(call: RollupU256CondEqCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetAttestorCall extends ethereum.Call {
  get inputs(): SetAttestorCall__Inputs {
    return new SetAttestorCall__Inputs(this);
  }

  get outputs(): SetAttestorCall__Outputs {
    return new SetAttestorCall__Outputs(this);
  }
}

export class SetAttestorCall__Inputs {
  _call: SetAttestorCall;

  constructor(call: SetAttestorCall) {
    this._call = call;
  }

  get phatAttestor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAttestorCall__Outputs {
  _call: SetAttestorCall;

  constructor(call: SetAttestorCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
